# F3AT - Flumotion Asynchronous Autonomous Agent Toolkit
# Copyright (C) 2010,2011 Flumotion Services, S.A.
# All rights reserved.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# See "LICENSE.GPL" in the source distribution for more information.

# Headers in this file shall remain intact.

import os
import signal

from feat.agencies.net import agency as net_agency, broker
from feat.agents.base import agent as base_agent
from feat.common import time, adapter
from feat.models import model, action, value, reference, attribute
from feat.models import call, getter, setter

from feat.models.interface import IModel

from feat.agencies.interface import AgencyRoles
from feat.interface.agent import AgencyAgentState


@adapter.register(net_agency.Agency, IModel)
class Root(model.Model):
    """
    Root model over an agency reference.
    For slave agencies, fetching children 'agencies' or 'agents'
    will return a reference the the master agency corresponding
    model while browsing is still allowed to be able to get to
    the slave agency owned models.
    """
    model.identity("feet.root")

    model.delegate("agencies", "feat.agencies",
                   #   fetch_filter=getter.model_get("_redirect_to_master"),
                   label="Agencies", desc="Agencies running on this host.")

    model.delegate("agents", "feat.agents",
                   # fetch_filter=getter.model_get("_redirect_to_master"),
                   label="Agents", desc="Agents running on this host.")

    def _redirect_to_master(self, name):
        result = self.source.locate_master()
        if result is not None:
            host, port, is_remote = result
            if is_remote:
                return reference.Absolute((host, port), name)
        return self.source


class Agencies(model.Collection):
    """
    Could only be fetched from the master agency.
    List all agencies and gives redirections to slave agencies.
    """
    model.identity("feat.agencies")

    model.child_model("feat.agency")
    model.child_names(call.source_call("iter_agency_ids"))
    model.child_source(getter.model_get("_fetch_agency"))
    model.meta('render_array', 2)

#    model.delete("full_shutdown",
#                 effect.delay(effect.source_call("full_shutdown",
#                                                 stop_process=True)),
#                 result=response.Deleted("Full Shutdown Succeed"),
#                 default=True,
#                 label="Full Shutdown",
#                 desc="Shutdown cleanly all agency processes.")

    def _fetch_agency(self, name):

        def agency_located(result):
            if result is None:
                return None
            host, port, is_remote = result
            if not is_remote:
                # It's the current agency we are talking about
                return self.source
            return reference.Absolute((host, port), "agencies", name)

        d = self.source.locate_agency(name)
        return d.addCallback(agency_located)


class Agency(model.Model):
    model.identity("feat.agency")

    model.attribute("id", value.String(),
                    getter.source_attr("agency_id"),
                    meta=[('link_owner', True)],
                    label="Identifier", desc="Agency unique identifier")
    model.attribute("role", value.Enum(AgencyRoles),
                    getter.source_attr("role"),
                    label="Agency Role", desc="Current role of the agency")
    model.attribute("log_filter", value.String(),
                    getter=call.source_call("get_logging_filter"),
                    setter=call.source_filter("set_logging_filter"),
                    label="Logging Filter",
                    desc="Rules to filter log entries generated by the agency")

    model.delegate("agents", "feat.agency.agents",
                   meta=[("render_array", 3)],
                   label="Agency's Agents",
                   desc="Agents running on this agency.")


#    model.delete("shutdown", effect.model_call("_shutdown"),
#                 label="Shutdown", desc="Shutdown the agency and its agents")
#    model.delete("terminate", effect.model_call("_terminate"), default=True,
#                 label="Terminate", desc="Shutdown the agency only")
#    model.delete("kill", effect.model_call("_kill"),
#                 label="Kill", desc="Violently kill the agency process")
#
#    def _shutdown(self):
#        time.call_later(self.source.shutdown, stop_process=True)
#        return self._deleted("Shutdown Succeed")
#
#    def _terminate(self):
#        time.call_later(os.kill, os.getpid(), signal.SIGTERM)
#        return self._deleted("Terminate Succeed")
#
#    def _kill(self):
#        time.call_later(os.kill, os.getpid(), signal.SIGKILL)
#        return self._deleted("Kill Succeed")
#
#    def _deleted(self, message):
#        result = self.source.locate_master()
#        if result is not None:
#            host, port, _is_remote = result
#            # FIXME: no location would mean the actual one
#            ref = reference.Absolute((host, port))
#            return response.Deleted(message, redirection=ref)


class AgencyAgents(model.Collection):
    model.identity("feat.agency.agents")

    model.child_names(call.model_call("iter_agents"))
    model.child_source(getter.local_ref("agents"))

    def iter_agents(self):
        res = [x.get_agent_id() for x in self.source.iter_agents()]
        return res


#class AgentTypeValue(value.String):
#    value.label("Agent type")
#    value.desc("Agents type allowed to be started")
#    value.option("dummy_buryme_agent", "Dummy Bury-Me Agent")
#    value.option("dummy_local_agent", "Dummy Local Agent")
#    value.option("dummy_wherever_agent", "Dummy Wherever Agent")
#    value.option("dummy_buryme_standalone", "Dummy Bury-Me Standalone")
#    value.option("dummy_local_standalone", "Dummy Local Standalone")
#    value.option("dummy_wherever_standalone", "Dummy Wherever Standalone")
#    value.options_only()


class Agents(model.Collection):
    model.identity("feat.agents")

    model.child_names(call.model_call("iter_agents"))
    model.child_source(getter.source_get("find_agent"))
    model.meta('render_array', 2)

    def iter_agents(self):
        res = [x.get_agent_id() for x in self.source.iter_agents()]
        for slave in self.source._broker.iter_slave_references():
            res.extend(slave.agents.keys())
        return res

    # model.create("spawn", effect.source_call("spawn_agent"),
    #              value=AgentTypeValue(),
    #              result=value.Response(),
    #              response=response.Created("Agent Created",
    #                                        reference.Relative()),
    #              label="Spawn Agent", desc="Spawn a new agent on this host")


@adapter.register(broker.AgentReference, IModel)
class RemoteAgent(model.Model):

    model.identity("feat.remote_agent")
    model.attribute("id", value.String(), getter.source_attr('agent_id'),
                    label="Agent id", desc="Agent's unique identifier",
                    meta=[('link_owner', True)])
    model.attribute("status", value.Enum(AgencyAgentState),
                    getter=call.source_call("get_status"),
                    label="Status", desc="Agent current status")
    model.attribute("type", value.String(),
                    getter=call.model_call("get_agent_type"),
                    label="Agent type", desc="Agent type")

    def get_agent_type(self):
        return self.source.callRemote('get_agent_type')


@adapter.register(net_agency.AgencyAgent, IModel)
class Agent(model.Model):

    model.identity("feat.agent")

    model.attribute("id", value.String(), call.source_call("get_agent_id"),
                    label="Agent id", desc="Agent's unique identifier",
                    meta=[('link_owner', True)])
    model.attribute("instance", value.Integer(),
                    call.source_call("get_instance_id"),
                    label="Instance", desc="Agent's instance number")
    model.attribute("status", value.Enum(AgencyAgentState),
                    getter=call.source_call("get_status"),
                    label="Status", desc="Agent current status")
    model.attribute("type", value.String(),
                    getter=call.source_call("get_agent_type"),
                    label="Agent type", desc="Agent type")

    model.child("partners",
                call.source_call("get_agent"),
                "feat.partners",
                label="Partners", desc="Agent's partners")

    # model.delegate("resources", "feat.resources",
    #            enabled=effect.model_call("_has_resources"),
    #            label="Resources", desc="Agent's resources.")

    # def _has_resources(self):
    #     return isinstance(self.source, resource.AgentMixin)


#class Resources(model.Model):
#    model.identity("feat.resources")
#
#    model.delegate("classes", "feat.resources_classes",
#               label="Classes", desc="Resource classes")
#    model.delegate("allocations", "feat.allocations",
#               label="Allocations", desc="Resource allocations")
#
#
#class ResourceClasses(collection.Model):
#    model.identity("feat.resource_classes")
#
#    collection.view_items(effect.source_call("get_resource_usage"),
#                          "feat.resource_class",
#                          label="Class", desc="Resource class")
#
#
#class ResourceClass(model.Model):
#    model.identity("feat.resource_class")
#
#    model.attribute("name", getter.model_attr("aspect_name"),
#                    label="Class Name", desc="Resource class name")
#    model.attribute("total", effect.view_call("get", 0))
#    model.attribute("allocated", effect.view_call("get", 1))
#    model.attribute("reserved", effect.view_call("get", 2))
#
#
#class Allocations(model.Collection):
#    model.identity("feat.allocations")
#
#    model.delegate_items(getter.source_call("iter_allocations"),
#                     "feat.allocation",
#                     lalbel="Allocation", desc="Agent allocation")
#
#
#class Allocation(model.Collection):
#    model.identity("feat.allocation")
#
#    model.delegate_items(getter.aspect_attr("alloc"),
#                     getter.model_get("_get_item_model"),
#                     label="Resources", desc="Allocated resource")
#
#    def _get_item_model(self, name):
#        return AllocationItem
#
#
#class AllocationItem(model.Collection):
#    model.identity("feat.allocation_item")
#
#    model.property("value", getter.model_attr("dummy"),
#                   label="Amount", desc="Amount allocated")
#    model.reference("class", "XXXX")
#
#    dummy = 0


class Partners(model.Collection):
    model.identity("feat.partners")

    model.view(call.source_call("query_partners", "all"))

    model.child_label("Partner")
    model.child_model("feat.partner")
    model.child_names(call.model_call("iter_partner_names"))
    model.child_view(getter.model_get("get_partner"))

    model.meta("render_array", 2)

    def iter_partner_names(self):
        return [p.recipient.key for p in self.view]

    def get_partner(self, name):
        for partner in self.view:
            if partner.recipient.key == name:
                return partner
        return None


class Partner(model.Model):
    #FIXME: should be more dynamic and dynamically add attribute
    model.identity("feat.partner")

    model.attribute("type", value.String(),
                    getter.view_attr("type_name"), label="Type")
    model.attribute("role", value.String("unknown"),
                    getter.view_getattr(), label="Role")

    model.child("recipient", getter.view_getattr(), "feat.recipient",
                label="Recipient")


class Recipient(model.Model):
    model.identity("feat.recipient")

    model.attribute("key", value.String(),
                    getter.source_attr("key"),
                    label="Key")
    model.attribute("route", value.String(),
                    getter.source_attr("route"),
                    label="Route")

    model.item_meta("key", "link_owner", True)


#class Partner(model.Model):
#    #FIXME: should be more dynamic and dynamically add attribute
#    model.identity("feat.partner")
#
#    model.attribute("agent_id", value.String(),
#                    call.model_call("get_agent_id"),
#                    label="Agent Id", desc="Partner agent identifier")
#    model.attribute("route", value.String(),
#                    call.model_call("get_route"),
#                    label="Route", desc="Partner agent route")
#
#    model.item_meta("agent_id", "link_owner", True)
#
#    def get_agent_id(self):
#        return self.view.recipient.key
#
#    def get_route(self):
#        return self.view.recipient.route


#class Monitor(Agent):
#    pass
