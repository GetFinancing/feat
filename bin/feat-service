#!/usr/bin/python
# -*- Mode: Python -*-
# vi:si:et:sw=4:sts=4:ts=4

# F3AT - Flumotion Asynchronous Autonomous Agent Toolkit
# Copyright (C) 2010,2011 Flumotion Services, S.A.
# All rights reserved.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# See "LICENSE.GPL" in the source distribution for more information.

# Headers in this file shall remain intact.
import time
import optparse
import sys

from feat.common import run, log, signal
from feat.agencies import bootstrap
from feat.agencies.net import options as options_module


def start(args):
    bootstrap.bootstrap(args=args[:-1])


def stop(options, sig=signal.SIGUSR1):
    # It will still not work if the option is set from environment
    rundir = options.agency_rundir or options_module.DEFAULT_RUNDIR
    pid = run.get_pid(rundir)
    if pid is None:
        sys.stderr.write("PID file not found!\n")
        sys.exit(1)
    if not run.signal_pid(pid, sig):
        sys.stderr.write("Process with PID %d not found!\n" % (pid, ))
        sys.exit(1)
    while run.get_pid(rundir):
        time.sleep(0.1)
    sys.stdout.write("Done.\n")
    return


def main(args):
    usage = "usage: feat [options] {start|stop|restart|status}"
    description = """
Handle the feat service.

stop shuts down feat violently, and monitoring agents on other machines will
migrate services.
restart restarts feat gently, so agents can restart on the same host.
"""

    parser = optparse.OptionParser(usage=usage, description=description)
    bootstrap.add_options(parser)

    try:
        command = args[-1]
    except IndexError:
        print parser.usage
        sys.exit(0)

    if command == 'start':
        start(args)
        return

    log.init()
    options, new_args = parser.parse_args()

    if options.debug:
        log.FluLogKeeper.set_debug(options.debug)

    if command == 'stop':
        stop(options, signal.SIGUSR1)
        return

    if command == 'restart':
        stop(options, signal.SIGUSR2)
        start(args)
        return

    if command == 'status':
        run.status(processName='', rundir=options.agency_rundir)
        return

    sys.stderr.write("No such command '%s'\n" % command)
    sys.stderr.write(parser.usage)
    sys.exit(1)


if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    except KeyboardInterrupt:
        pass
