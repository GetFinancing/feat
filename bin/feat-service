#!/usr/bin/python
# F3AT - Flumotion Asynchronous Autonomous Agent Toolkit
# Copyright (C) 2010,2011 Flumotion Services, S.A.
# All rights reserved.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# See "LICENSE.GPL" in the source distribution for more information.

# Headers in this file shall remain intact.

import optparse
import sys
import os

from feat.common import run, log
from feat.agencies import bootstrap
from feat.agencies.net import options as options_module


def setup_log(debug):
    log.FluLogKeeper.init()
    if debug:
        log.FluLogKeeper.set_debug(debug)

if __name__ == '__main__':
    usage = "usage: feat [options] {start|stop|status}"
    parser = optparse.OptionParser(usage)
    options_module.add_options(parser)
    options, args = parser.parse_args()
    try:
        command = sys.argv[-1]
    except IndexError:
        print parser.usage
        sys.exit(0)

    try:
        if command == 'start':
            bootstrap.bootstrap(args=sys.argv[1:-1])
        elif command == 'stop':
            setup_log(options.debug)
            os.system('ssh localhost -p %d "shutdown()"' %
                      (options.manhole_port, ))
        elif command == 'status':
            setup_log(options.debug)
            run.status(processName='', rundir=options.agency_rundir)
        else:
            sys.stderr.write("No such command '%s'\n" % command)
            sys.stderr.write(parser.usage)
            sys.exit(1)
    except KeyboardInterrupt:
        pass
